// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeReferees holds the string denoting the referees edge name in mutations.
	EdgeReferees = "referees"
	// EdgeReferences holds the string denoting the references edge name in mutations.
	EdgeReferences = "references"
	// Table holds the table name of the book in the database.
	Table = "books"
	// RefereesTable is the table that holds the referees relation/edge. The primary key declared below.
	RefereesTable = "book_references"
	// ReferencesTable is the table that holds the references relation/edge. The primary key declared below.
	ReferencesTable = "book_references"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldAuthor,
	FieldTitle,
}

var (
	// RefereesPrimaryKey and RefereesColumn2 are the table columns denoting the
	// primary key for the referees relation (M2M).
	RefereesPrimaryKey = []string{"book_id", "referee_id"}
	// ReferencesPrimaryKey and ReferencesColumn2 are the table columns denoting the
	// primary key for the references relation (M2M).
	ReferencesPrimaryKey = []string{"book_id", "referee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Book queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByRefereesCount orders the results by referees count.
func ByRefereesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRefereesStep(), opts...)
	}
}

// ByReferees orders the results by referees terms.
func ByReferees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefereesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReferencesCount orders the results by references count.
func ByReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferencesStep(), opts...)
	}
}

// ByReferences orders the results by references terms.
func ByReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRefereesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RefereesTable, RefereesPrimaryKey...),
	)
}
func newReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReferencesTable, ReferencesPrimaryKey...),
	)
}
